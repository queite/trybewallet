{"version":3,"sources":["services/fetchCurrencies.js","actions/index.js","pages/Login.js","components/Header.js","components/ExpensesForm.js","components/TableExpenses.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["fetchCurrencies","a","fetch","response","json","data","getCurrenciesAction","currencies","type","saveExpenseAction","expense","updateTotal","total","deleteExpense","expenses","isEditing","id","Login","handleInput","target","name","value","setState","loginValidation","state","email","password","test","length","isDisabled","handleLogin","props","history","sendLogin","push","this","className","htmlFor","data-testid","onChange","disabled","onClick","React","Component","connect","dispatch","Header","handleTotal","reduce","acc","currentValue","exchangeRates","currency","ask","toFixed","prevProps","userEmail","user","wallet","ExpensesForm","handleExpense","getState","currentState","rates","expenseAndRates","console","log","description","method","tag","handleEdit","idToEdit","expenseToEdit","filter","editedExpense","isEditingStatus","map","coin","index","key","defaultProps","TableExpenses","handleDelete","newExpenses","cambio","currencyName","split","rate","Number","Wallet","getCurrencies","App","path","component","exact","Boolean","window","location","hostname","match","INITIAL_STATE","action","Object","keys","parseFloat","item","reducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1c766b19.chunk.js","sourcesContent":["const URL = 'https://economia.awesomeapi.com.br/json/all';\n\nconst fetchCurrencies = async () => {\n  const response = await fetch(URL);\n  const data = await response.json();\n  return data;\n};\n\nexport default fetchCurrencies;\n","import fetchCurrencies from '../services/fetchCurrencies';\n\nexport const LOGIN = 'LOGIN';\nexport const GET_CURRENCIES = 'GET_CURRENCIES';\nexport const SAVE_EXPENSE = 'SAVE_EXPENSE';\nexport const UPDATE_TOTAL = 'UPDATE_TOTAL';\nexport const DELETE = 'DELETE';\nexport const EDITING = 'EDITING';\nexport const EDIT = 'EDIT';\n\nexport const actionLogin = (email) => ({ type: LOGIN, email });\nexport const getCurrenciesAction = (currencies) => ({ type: GET_CURRENCIES, currencies });\nexport const saveExpenseAction = (expense) => ({ type: SAVE_EXPENSE, expense });\nexport const updateTotal = (total) => ({ type: UPDATE_TOTAL, total });\nexport const deleteExpense = (expenses) => ({ type: DELETE, expenses });\nexport const isEditing = (id) => ({ type: EDITING, id });\nexport const editExpense = (expense) => ({ type: EDIT, expense }); // tenho que receber aqui o objeto inteiro já modificado\n\nexport function getCurrenciesThunk() {\n  return async (dispatch) => {\n    try {\n      const currencies = await fetchCurrencies();\n      dispatch(getCurrenciesAction(currencies));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}\n\nexport function getRatesThunk(expense) {\n  return async (dispatch, getState) => {\n    try {\n      const currentState = getState();\n      const rates = await fetchCurrencies();\n      const expenseAndRates = {\n        ...expense,\n        exchangeRates: rates,\n        id: currentState.wallet.expenses.length,\n      };\n      dispatch(saveExpenseAction(expenseAndRates));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { actionLogin } from '../actions';\nimport '../styles/Login.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      isDisabled: true,\n      email: '',\n      password: '',\n    };\n  }\n\n  handleInput = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value }, this.loginValidation);\n  }\n\n  loginValidation = () => {\n    const { email, password } = this.state;\n    const minLength = 6;\n    const emailRegex = /^[a-z0-9]+@[a-z0-9]+\\.[a-z]+/i;\n\n    if (emailRegex.test(email) && password.length >= minLength) {\n      this.setState({ isDisabled: false });\n    } else {\n      this.setState({ isDisabled: true });\n    }\n  }\n\n  handleLogin = () => {\n    const { history, sendLogin } = this.props;\n    const { email } = this.state;\n    sendLogin(email);\n    history.push('/carteira');\n  }\n\n  render() {\n    const { email, password, isDisabled } = this.state;\n    return (\n      <section className=\"login-container\">\n        <label htmlFor=\"email\">\n          E-mail:\n          <input\n            data-testid=\"email-input\"\n            type=\"text\"\n            name=\"email\"\n            onChange={ this.handleInput }\n            value={ email }\n            id=\"email\"\n          />\n        </label>\n        <label htmlFor=\"password\">\n          Senha:\n          <input\n            data-testid=\"password-input\"\n            type=\"password\"\n            name=\"password\"\n            onChange={ this.handleInput }\n            value={ password }\n            id=\"password\"\n          />\n        </label>\n        <button\n          disabled={ isDisabled }\n          type=\"button\"\n          onClick={ this.handleLogin }\n        >\n          Entrar\n        </button>\n      </section>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendLogin: (state) => dispatch(actionLogin(state)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  sendLogin: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport '../styles/Header.css';\nimport { updateTotal } from '../actions';\n\nclass Header extends Component {\n  componentDidMount() {\n    this.handleTotal();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { expenses } = this.props;\n    if (prevProps.expenses !== expenses) {\n      this.handleTotal();\n    }\n  }\n\n  handleTotal = () => {\n    const { expenses, dispatch } = this.props;\n    const total = expenses.reduce((acc, currentValue) => {\n      const cambio = currentValue.value\n        * currentValue.exchangeRates[currentValue.currency].ask;\n      acc += cambio;\n      return acc;\n    }, 0);\n    dispatch(updateTotal(total.toFixed(2)));\n  }\n\n  render() {\n    const { userEmail, total } = this.props;\n    return (\n      <header>\n        <h1>\n          TRYBE\n          <strong>WALLET</strong>\n        </h1>\n        <section>\n          <p data-testid=\"email-field\">{userEmail}</p>\n          <div className=\"total-container\">\n            <p data-testid=\"total-field\">{total || 0}</p>\n            <p data-testid=\"header-currency-field\">BRL</p>\n          </div>\n        </section>\n\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  userEmail: state.user.email,\n  expenses: state.wallet.expenses,\n  total: state.wallet.total,\n});\n\nexport default connect(mapStateToProps)(Header);\n\nHeader.propTypes = {\n  userEmail: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  dispatch: PropTypes.func.isRequired,\n  total: PropTypes.number.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getRatesThunk, editExpense, isEditing } from '../actions';\nimport '../styles/ExpensesForm.css';\n\nclass ExpensesForm extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: '',\n      description: '',\n      currency: '',\n      method: '',\n      tag: '',\n    };\n  }\n\n  handleInput = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  handleExpense = () => {\n    const { dispatch } = this.props;\n    dispatch(getRatesThunk(this.state));\n\n    this.setState({\n      value: '',\n      description: '',\n      currency: '',\n      method: '',\n      tag: '',\n    });\n  }\n\n  handleEdit = () => {\n    const { dispatch, idToEdit, expenses } = this.props;\n    const expenseToEdit = expenses.filter((expense) => expense.id === idToEdit);\n    const { value, description, currency, method, tag } = this.state;\n    const editedExpense = {\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      id: idToEdit,\n      exchangeRates: expenseToEdit[0].exchangeRates,\n    };\n    dispatch(editExpense(editedExpense));\n    dispatch(isEditing());\n\n    this.setState({\n      value: '',\n      description: '',\n      currency: '',\n      method: '',\n      tag: '',\n    });\n  }\n\n  render() {\n    const { currencies, isEditingStatus } = this.props;\n    const { value, description, currency, method, tag } = this.state;\n    return (\n      <form className=\"form-container\">\n        <label htmlFor=\"value\">\n          Valor\n          <input\n            data-testid=\"value-input\"\n            type=\"text\"\n            id=\"value\"\n            name=\"value\"\n            value={ value }\n            onChange={ this.handleInput }\n          />\n        </label>\n\n        <label htmlFor=\"description\">\n          Descrição\n          <input\n            data-testid=\"description-input\"\n            type=\"text\"\n            id=\"description\"\n            name=\"description\"\n            value={ description }\n            onChange={ this.handleInput }\n          />\n        </label>\n\n        <label htmlFor=\"currencyExpense\">\n          Moeda\n          <select\n            id=\"currencyExpense\"\n            name=\"currency\"\n            value={ currency }\n            onChange={ this.handleInput }\n            data-testid=\"currency-input\"\n          >\n            {currencies.map((coin, index) => (\n              <option key={ index } value={ coin }>{coin}</option>\n            ))}\n          </select>\n        </label>\n\n        <label htmlFor=\"payment\">\n          Forma de pagamento\n          <select\n            data-testid=\"method-input\"\n            id=\"payment\"\n            name=\"method\"\n            value={ method }\n            onChange={ this.handleInput }\n          >\n            <option value=\"\">Selecione</option>\n            <option value=\"Dinheiro\">Dinheiro</option>\n            <option value=\"Cartão de crédito\">Cartão de crédito</option>\n            <option value=\"Cartão de débito\">Cartão de débito</option>\n          </select>\n        </label>\n\n        <label htmlFor=\"tag\">\n          Categoria\n          <select\n            data-testid=\"tag-input\"\n            id=\"tag\"\n            name=\"tag\"\n            value={ tag }\n            onChange={ this.handleInput }\n          >\n            <option value=\"\">Selecione</option>\n            <option value=\"Alimentação\">Alimentação</option>\n            <option value=\"Lazer\">Lazer</option>\n            <option value=\"Trabalho\">Trabalho</option>\n            <option value=\"Transporte\">Transporte</option>\n            <option value=\"Saúde\">Saúde</option>\n          </select>\n        </label>\n        <button\n          type=\"button\"\n          onClick={ isEditingStatus ? this.handleEdit : this.handleExpense }\n        >\n          {isEditingStatus ? 'Editar despesa' : 'Adicionar despesa'}\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n  idToEdit: state.wallet.idToEdit,\n  isEditingStatus: state.wallet.isEditing,\n});\n\nexport default connect(mapStateToProps)(ExpensesForm);\n\nExpensesForm.propTypes = {\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n  dispatch: PropTypes.func.isRequired,\n  idToEdit: PropTypes.number,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  isEditingStatus: PropTypes.bool.isRequired,\n};\n\nExpensesForm.defaultProps = {\n  idToEdit: 0,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { AiOutlineEdit, AiOutlineDelete } from 'react-icons/ai';\nimport { deleteExpense, isEditing } from '../actions';\nimport '../styles/TableExpenses.css';\n\nclass TableExpenses extends Component {\n  handleDelete = (id) => {\n    const { expenses, dispatch } = this.props;\n    const newExpenses = expenses.filter((expense) => expense.id !== id);\n    dispatch(deleteExpense(newExpenses));\n  }\n\n  handleEdit = (id) => {\n    const { dispatch } = this.props;\n    dispatch(isEditing(id));\n  }\n\n  render() {\n    const { expenses } = this.props;\n    return (\n      <section className=\"table\">\n        <table>\n          <thead>\n            <tr className=\"top\">\n              <th>Descrição</th>\n              <th>Tag</th>\n              <th>Método de pagamento</th>\n              <th>Valor</th>\n              <th>Moeda</th>\n              <th>Câmbio utilizado</th>\n              <th>Valor convertido</th>\n              <th>Moeda de conversão</th>\n              <th>Editar/Excluir</th>\n            </tr>\n          </thead>\n          <tbody>\n            {expenses.map((expense) => {\n              const { id, description, tag, method,\n                value, currency, exchangeRates } = expense;\n              const cambio = (value * exchangeRates[currency].ask).toFixed(2);\n              const currencyName = exchangeRates[currency].name.split('/');\n              const rate = Number(exchangeRates[currency].ask).toFixed(2);\n              return (\n                <tr key={ id }>\n                  <td>{description}</td>\n                  <td>{tag}</td>\n                  <td>{method}</td>\n                  <td>{Number(value).toFixed(2)}</td>\n                  <td>{currencyName[0]}</td>\n                  <td>{rate}</td>\n                  <td>{cambio}</td>\n                  <td>Real</td>\n                  <td>\n                    <AiOutlineEdit\n                      data-testid=\"edit-btn\"\n                      onClick={ () => this.handleEdit(id) }\n                    />\n                    <AiOutlineDelete\n                      data-testid=\"delete-btn\"\n                      type=\"button\"\n                      onClick={ () => this.handleDelete(id) }\n                    />\n                  </td>\n                </tr>);\n            })}\n          </tbody>\n        </table>\n      </section>\n\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n  isEditing: state.wallet.isEditing,\n});\n\nexport default connect(mapStateToProps)(TableExpenses);\n\nTableExpenses.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object),\n  id: PropTypes.number,\n  description: PropTypes.string,\n  tag: PropTypes.string,\n  method: PropTypes.string,\n  value: PropTypes.string,\n  currency: PropTypes.string,\n  exchangeRates: PropTypes.object,\n}.isRequired;\n\n// Material consultado:\n// https://edrodrigues.com.br/blog/criando-tabelas-com-filtros-%E2%80%8B%E2%80%8Busando-react/#:~:text=Criando%20Uma%20Tabela%20Com%20O,listando%20uma%20linha%20por%20produto.&text=Aqui%2C%20aceitamos%20uma%20variedade%20de,em%20loop%20em%20nossa%20tabela.\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getCurrenciesThunk } from '../actions';\nimport Header from '../components/Header';\nimport ExpensesForm from '../components/ExpensesForm';\nimport TableExpenses from '../components/TableExpenses';\n\nclass Wallet extends React.Component {\n  componentDidMount() {\n    const { getCurrencies } = this.props;\n    getCurrencies();\n  }\n\n  render() {\n    const { expenses } = this.props;\n    return (\n      <>\n        <Header />\n        <ExpensesForm />\n        {expenses.length ? <TableExpenses /> : <p>Insira suas despesas no formulário</p>}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCurrencies: () => dispatch(getCurrenciesThunk()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n\nWallet.propTypes = {\n  getCurrencies: PropTypes.func.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <div>\n      <Switch>\n        <Route path=\"/carteira\" component={ Wallet } />\n        <Route exact path=\"/\" component={ Login } />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { LOGIN } from '../actions';\n\nconst INITIAL_STATE = { email: '' };\n\nconst user = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case LOGIN:\n    return {\n      ...state,\n      email: action.email,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","import { DELETE, EDIT, EDITING, GET_CURRENCIES,\n  SAVE_EXPENSE, UPDATE_TOTAL } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  total: 0,\n  isEditing: false,\n};\n\nconst wallet = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case GET_CURRENCIES:\n    return {\n      ...state,\n      currencies: Object.keys(action.currencies)\n        .filter((currency) => currency !== 'USDT'),\n    };\n  case SAVE_EXPENSE:\n    return {\n      ...state,\n      expenses: [...state.expenses, action.expense],\n    };\n  case UPDATE_TOTAL:\n    return {\n      ...state,\n      total: Number.parseFloat(action.total),\n    };\n  case DELETE:\n    return {\n      ...state,\n      expenses: action.expenses,\n    };\n  case EDITING:\n    return {\n      ...state,\n      isEditing: !state.isEditing,\n      idToEdit: action.id,\n    };\n  case EDIT:\n    return {\n      ...state,\n      expenses: state.expenses\n        .map((item) => (item.id === action.expense.id ? action.expense : item)),\n    };\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst reducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default reducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}